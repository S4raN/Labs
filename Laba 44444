#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

void printLongestIncreasingSubsequence(const vector<int>& nums, const vector<int>& dp, int maxLength) {
    vector<vector<int>> allSubsequences;
    int maxDp = *max_element(dp.begin(), dp.end());

    for (int i = dp.size() - 1; i >= 0; --i) {
        if (dp[i] == maxDp) {
            vector<int> currentSequence;
            int currentLength = maxDp;
            for (int j = i; j >= 0; --j) {
                if (dp[j] == currentLength && nums[j] <= nums[i]) {
                    currentSequence.push_back(nums[j]);
                    currentLength--;
                }
            }
            reverse(currentSequence.begin(), currentSequence.end());
            allSubsequences.push_back(currentSequence);
        }
    }

    cout << "Самая длинная строго возрастающая подпоследовательность: ";
    for (const auto& subsequence : allSubsequences) {
        for (int num : subsequence) {
            cout << num << " ";
        }
        cout << endl;
    }
}

int longestIncreasingSubsequence(const vector<int>& nums){
    int n = nums.size();
    vector<int> dp(n, 1);

    for (int i = 1; i < n; ++i){
        for (int j = 0; j < i; ++j){
            if (nums[i] > nums[j] && dp[i] < dp[j] + 1)
                dp[i] = dp[j] + 1;
        }
    }

    printLongestIncreasingSubsequence(nums, dp, *max_element(dp.begin(), dp.end()));

    int maxLength = 0;
    for (int i = 0; i < n; ++i){
        if (dp[i] > maxLength)
            maxLength = dp[i];
    }

    return maxLength;
}

int main(){
    vector<int> nums = {1, 3, 4, 4, 2, 5, 0};

    int length = longestIncreasingSubsequence(nums);

    return 0;
}
