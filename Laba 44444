#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

vector<int> longest(const vector<int>& A) {
    int n = A.size();
    vector<int> L(n, 1);
    vector<int> N(n, -1); 
    int maxLength = 1; 

    for (int i = 1; i < n; ++i) {
        for (int j = 0; j < i; ++j) {
            if (A[i] > A[j] && L[i] < L[j] + 1) {
                L[i] = L[j] + 1;
                N[i] = j;
                maxLength = max(maxLength, L[i]);
                
             /* cout<<endl<<"L: "<<endl;
                for(auto i:L){
                  cout<<i<<" ";}
              cout<<endl<<"N: "<<endl;
              for(auto i:N){
                cout<<i<<" ";}*/
            }
        }
    }
  

    int lastIndex = -1;
    for (int i = 0; i < n; ++i) {
        if (L[i] == maxLength) {
            lastIndex = i;
            break;
        }
    }

    vector<int> result;
    while (lastIndex != -1) {
        result.push_back(A[lastIndex]);
        lastIndex = N[lastIndex];
    }

    reverse(result.begin(), result.end());

    return result;
}

int main() {
    vector<int> sequence = {2,8,5,9,12,6,4,3,7,10,11,13,15};
  cout<<"Sequence:"<<endl;  
  for(auto i:sequence){
      cout<<i<<" ";
    }
  vector<int> longestSubsequence = longest(sequence);
  
    cout <<endl<< "Longest:" << endl;
    for (int num : longestSubsequence) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}
