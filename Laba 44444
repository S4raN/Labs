#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
using namespace std;

void printLongestIncreasingSubsequence(const vector<int>& nums, const vector<int>& dp, int maxLength) {
    vector<pair<int, int>> subsequencesEnd;
    int maxDp = *max_element(dp.begin(), dp.end());

    for (int i = dp.size() - 1; i >= 0; --i) {
        if (dp[i] == maxDp) {
            vector<int> currentSequence;
            int currentLength = maxDp;
            for (int j = i; j >= 0; --j) {
                if (dp[j] == currentLength && nums[j] <= nums[i]) {
                    currentSequence.push_back(nums[j]);
                    currentLength--;
                }
            }
            reverse(currentSequence.begin(), currentSequence.end());
            subsequencesEnd.push_back({currentSequence.front(), currentSequence.back()});
        }
    }

    // Find the subsequence with maximum first element and minimum last element
    pair<int, int> bestSubsequenceEnd = {INT_MIN, INT_MAX};
    for (const auto& subseqEnd : subsequencesEnd) {
        if (subseqEnd.first > bestSubsequenceEnd.first || 
            (subseqEnd.first == bestSubsequenceEnd.first && subseqEnd.second < bestSubsequenceEnd.second)) {
            bestSubsequenceEnd = subseqEnd;
        }
    }

    cout << "Самая длинная строго возрастающая подпоследовательность: ";
    for (int i = 0; i < nums.size(); ++i) {
        if (nums[i] >= bestSubsequenceEnd.first && nums[i] <= bestSubsequenceEnd.second) {
            cout << nums[i] << " ";
        }
    }
    cout << endl;
}

int longestIncreasingSubsequence(const vector<int>& nums){
    int n = nums.size();
    vector<int> dp(n, 1);

    for (int i = 1; i < n; ++i){
        for (int j = 0; j < i; ++j){
            if (nums[i] > nums[j] && dp[i] < dp[j] + 1)
                dp[i] = dp[j] + 1;
        }
    }

    printLongestIncreasingSubsequence(nums, dp, *max_element(dp.begin(), dp.end()));

    int maxLength = 0;
    for (int i = 0; i < n; ++i){
        if (dp[i] > maxLength)
            maxLength = dp[i];
    }

    return maxLength;
}

int main(){
    vector<int> nums = {1, -1, 4, 4, 2, 5, 0};

    longestIncreasingSubsequence(nums);

    return 0;
}
