#include <iostream>
#include <vector>
using namespace std;

void printLongestIncreasingSubsequence(const vector<int>& nums, const vector<int>& dp, const vector<vector<int>>& parents) {
    int maxLengthIndex = 0;
    for (int i = 1; i < dp.size(); ++i) {
        if (dp[i] > dp[maxLengthIndex])
            maxLengthIndex = i;
    }

    vector<int> longestSubsequence;
    int currentLength = dp[maxLengthIndex];
    longestSubsequence.push_back(nums[maxLengthIndex]);

    while (parents[maxLengthIndex].size() > 0) {
        maxLengthIndex = parents[maxLengthIndex][0];
        longestSubsequence.push_back(nums[maxLengthIndex]);
    }

    cout << "Самая длинная строго возрастающая подпоследовательность: ";
    for (int i = longestSubsequence.size() - 1; i >= 0; --i) {
        cout << longestSubsequence[i] << " ";
    }
    cout << endl;
}

int longestIncreasingSubsequence(const vector<int>& nums){
    int n = nums.size();
    vector<int> dp(n, 1);
    vector<vector<int>> parents(n);

    for (int i = 1; i < n; ++i){
        for (int j = 0; j < i; ++j){
            if (nums[i] > nums[j] && dp[i] < dp[j] + 1) {
                dp[i] = dp[j] + 1;
                parents[i].clear();
                parents[i].push_back(j);
            } else if (nums[i] > nums[j] && dp[i] == dp[j] + 1) {
                parents[i].push_back(j);
            }
        }
    }

    printLongestIncreasingSubsequence(nums, dp, parents);

    int maxLength = 0;
    for (int i = 0; i < n; ++i){
        if (dp[i] > maxLength)
            maxLength = dp[i];
    }

    return maxLength;
}

int main(){
    vector<int> nums = {1, 3, 4, 4, 2, 5, 0};

    longestIncreasingSubsequence(nums);

    return 0;
}
