#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

void printLongestIncreasingSubsequence(const vector<int>& nums, const vector<int>& dp, int maxLength) {
    int lastIndex = -1;
    for (int i = 0; i < dp.size(); ++i) {
        if (dp[i] == maxLength) {
            lastIndex = i;
            break;
        }
    }

    vector<int> longestSubsequence;
    while (lastIndex != -1) {
        longestSubsequence.push_back(nums[lastIndex]);
        for (int i = lastIndex - 1; i >= 0; --i) {
            if (nums[i] < nums[lastIndex] && dp[i] == dp[lastIndex] - 1) {
                lastIndex = i;
                break;
            }
        }
        if (lastIndex == 0)
            break;
    }

    cout << "Самая длинная строго возрастающая подпоследовательность: ";
    for (int i = longestSubsequence.size() - 1; i >= 0; --i) {
        cout << longestSubsequence[i] << " ";
    }
    cout << endl;
}

int longestIncreasingSubsequence(const vector<int>& nums){
    int n = nums.size();
    vector<int> dp(n, 1);

    for (int i = 1; i < n; ++i){
        for (int j = 0; j < i; ++j){
            if (nums[i] > nums[j] && dp[i] < dp[j] + 1)
                dp[i] = dp[j] + 1;
        }
    }

    int maxLength = *max_element(dp.begin(), dp.end());
    printLongestIncreasingSubsequence(nums, dp, maxLength);

    return maxLength;
}

int main(){
    vector<int> nums = {1, -1, 4, 4, 2, 5, 0};

    longestIncreasingSubsequence(nums);

    return 0;
}
